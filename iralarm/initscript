#!/bin/bash
### BEGIN INIT INFO
# Provides:          skeleton
# Required-Start:    $remote_fs $network $syslog
# Required-Stop:     $remote_fs $network $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: iralarmd initscript
# Description:       iralarm dameon initscript
#                    placed in /etc/init.d.
### END INIT INFO

# Author: TOni Uhlig <matzeton@googlemail.com>

PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="IR-Alarm Daemon"
NAME=iralarmd
DAEMON=/usr/sbin/$NAME
DAEMON_ARGS=""
SCRIPTNAME=/etc/init.d/$NAME

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

. /lib/lsb/init-functions


do_start()
{
		[ -z "$IRALARM_USER" ] || DAEMON_ARGS="-u ${IRALARM_USER}"
	if [ "x$IRALARM_XMPP" = "xyes" ]; then
		[ -z "$IRALARM_JID" ] || DAEMON_ARGS="${DAEMON_ARGS} -j ${IRALARM_JID}"
		[ -z "$IRALARM_RCP" ] || DAEMON_ARGS="${DAEMON_ARGS} -x ${IRALARM_RCP}"
		[ -z "$IRALARM_SRV" ] || DAEMON_ARGS="${DAEMON_ARGS} -s ${IRALARM_SRV}"
		[ -z "$IRALARM_PASSFILE" ] || DAEMON_ARGS="${DAEMON_ARGS} -w ${IRALARM_PASSFILE}"
	fi
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	start-stop-daemon --start --quiet --exec $DAEMON --test > /dev/null \
		|| return 1
	start-stop-daemon --start --quiet --exec $DAEMON -- \
		$DAEMON_ARGS \
		|| return 2
	# Add code here, if necessary, that waits for the process to be ready
	# to handle requests from services started subsequently which depend
	# on this one.  As a last resort, sleep for some time.
}

do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	start-stop-daemon --stop --quiet --name $NAME >/dev/null 2>/dev/null
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
	# Wait for children to finish too if this is a daemon that forks
	# and if the daemon is only ever run from this initscript.
	# If the above conditions are not satisfied then add some other code
	# that waits for the process to drop all resources that could be
	# needed by services started subsequently.  A last resort is to
	# sleep for some time.
	start-stop-daemon --stop --quiet --oknodo --exec $DAEMON >/dev/null 2>/dev/null
	[ "$?" = 2 ] && return 2
	return "$RETVAL"
}

case "$1" in
  start)
	log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		1) log_end_msg 0 ;;
		1|2) log_end_msg 1 ;;
	esac
	;;
  stop)
	log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0) log_end_msg 0 ;;
		1|2) log_end_msg 1 ;;
	esac
	;;
  status)
	status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
	;;
  restart|force-reload)
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
		# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

:
